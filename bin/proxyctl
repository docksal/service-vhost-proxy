#!/usr/bin/env bash

### Configuration variables ###

DEBUG_LOG=${DEBUG_LOG:-0}
STATS_LOG=${STATS_LOG:-0}

# /usr/local/bin is not by default in PATH for nginx user (running this script).
# Since we install docker binary there, we need it included in PATH.
export PATH=/usr/local/bin:$PATH

### Helper functions ###

# Checks if there was any recent container activity (entries in the container logs)
# `docker log` does honor stdout vs stderr outputs. We route everything to stdout to do the comparison (2>&1)
is_container_active ()
{
	container_id="$1"
	# Tail last 5 log entries to account for possible blank lines
	[[ "$(docker logs --tail 5 --since "$PROJECT_INACTIVITY_TIMEOUT" "$container_id" 2>&1)" != "" ]]
}
is_container_dangling ()
{
	container_id="$1"
	# Tail last 5 log entries to account for possible blank lines
	[[ "$(docker logs --tail 5 --since "$PROJECT_DANGLING_TIMEOUT" "$container_id" 2>&1)" == "" ]]
}

### Functions ###

# Lookup containers for a project identified with a virtual host
# @param $1 virtual host name
lookup ()
{
	# Set logging prefix for the function and trigger a log entry
	export LOG_PREFIX='[lookup]' && log
	
	local vhost="$1"
	[[ "$vhost" == "" ]] && log "ERROR: Empty virtual host." && return 1

	# Match vhost to the primary project container (exact match only)
	local project_name
	local container_id
	
	# Filter: primary containers with a defined virtual host
	project_name=$(docker ps -a \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host=$vhost" \
		--format '{{.Label "com.docker.compose.project"}}')

	# If exact match was not found, then we have multiple domains/wildcards (e.g. example.com,*.example.com,example2.com)
	# More complex processing goes below.
	if [[ "$project_name" == "" ]]; then
		container_id=$(docker ps -a \
			--filter "label=io.docksal.virtual-host=$vhost" \
			--format '{{.ID }}')
		if [[ "$container_id" == "" ]]; then
			# Get a list of all (running and stopped) projects and their virtual host label values
			local all_projects=$(docker ps -a \
				--filter "label=io.docksal.virtual-host" \
				--format '{{ .ID }}:{{.Label "com.docker.compose.project"}}:{{.Label "io.docksal.virtual-host"}}')

			# Look for a matching label among all projects
			while read _project; do
				# Read variables
				IFS=':' read _container_id _project_name _project_vhosts <<< "$_project";
				# Split _project_vhosts
				# Cannot get "while IFS=',' read" work together, so using and array and 'for' instead here.
				IFS=',' read -a _project_vhost_arr <<< "$_project_vhosts"
				for i in "${_project_vhost_arr[@]}"; do
					# Turn domain name into a regular expression (e.g. *.example.com => .*\.example\.com)
					i_reg=$(echo "$i" | sed "s/\./\\\\./g" | sed "s/\*/\.\*/g")
					# Match vhost using the regular expression we created
					if (echo "$vhost" | grep "^$i_reg$" >/dev/null); then
						project_name="$_project_name"
						container_id="$_container_id"
						# Break two levels up if match was found
						break 2
					fi
				done
			done <<< "$all_projects"
		fi
	fi

	# No match if project_name is empty here.
	if [[ "$project_name" == "" ]]; then
		if [[ "$container_id" == "" ]]; then
			log "ERROR: No matching projects or containers found for virtual host '${vhost}'."
			return 1
		else
			log "Found a standalone container '$container_id'..."
			echo "container ${container_id}"
		fi
	else
		log "Found a project stack '$project_name'..."
		echo "project ${project_name}"
	fi
}

start ()
{
	# Set logging prefix for the function and trigger a log entry
	export LOG_PREFIX='[start]' && log

	# Disable projects autostart in case PROJECT_AUTOSTART set to 0
	[[ "$PROJECT_AUTOSTART" == 0 ]] && log "WARNING: Projects autostart is disabled." && return 0

	local type=${1}
	local id=${2}

	[[ "$type" == "" ]] && log "ERROR: Empty type." && return 1
	[[ "$id" == "" ]] && log "ERROR: Empty id." && return 1

	if [[ "$type" == "container" ]]; then
		local container_id=${id}
		log "Starting a standalone container '$container_id'..."
		docker start "$container_id"
	elif [[ "$type" == "project" ]]; then
		local project_name=${id}
		log "Starting project stack for '${project_name}'..."

		# Connecting/re-connecting vhost-proxy to the project network
		local network="${project_name}_default"
		# Making sure the network exists
		docker network create "$network" >/dev/null 2>&1
		# Reconnect vhost-proxy to the project network (in case vhost-proxy has been recently reset)
		docker network connect "$network" docksal-vhost-proxy >/dev/null 2>&1
		if [[ $? == 0 ]]; then
			log "Connected proxy to network '${network}'."
		fi

		# Reconnect project containers to the re-created network
		local project_containers=$(docker ps -a \
			--filter "label=com.docker.compose.project=${project_name}" \
			--format '{{.ID}}:{{.Label "com.docker.compose.service"}}')
		while read project_container; do
			# Read variables
			IFS=':' read container_id service_name <<< "$project_container";
			# Reconnect container to the project network with the service alias
			# (without the alias name resolution for web/db/cli/etc. service names won't work)
			docker network connect --alias "$service_name" "$network" "$container_id" >/dev/null
		done <<< "$project_containers"

		log "Stopping docker-gen..."
		supervisorctl stop docker-gen

		log "Starting containers for $project_name..."
		# Dirty hack to avoid using docker-compose and still be able to launch containers with dependencies up to 3 levels deep.
		for i in {1..3}; do
			log "Pass #$i..."
			docker ps -qa --filter "label=com.docker.compose.project=${project_name}" | xargs docker start
		done

		log "Starting docker-gen..."
		supervisorctl start docker-gen
	else
		log "ERROR: Invalid type."
		return 1
	fi
}

# Stop containers for projects after a timeout set via PROJECT_INACTIVITY_TIMEOUT
stop ()
{
	# Set logging prefix for the function and trigger a log entry
	export LOG_PREFIX='[stop]' && log

	# Allow disabling PROJECT_INACTIVITY_TIMEOUT (0 = disabled)
	[[ "$PROJECT_INACTIVITY_TIMEOUT" == 0 ]] && exit

	# Filter: primary containers with a defined virtual host
	local running_projects=$(docker ps \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host" \
		--format '{{ .ID }}:{{ .Label "com.docker.compose.project" }}')

	while read running_project; do
		# Read variables
		IFS=':' read container_id project_name <<< "$running_project";
		# Skip containers with empty values
		[[ "$project_name" == "" ]] && continue
		# Skip active projects
		is_container_active "$container_id" && continue

		# Stop inactive project containers
		log "Stopping inactive project: ${project_name}..."
		local project_containers=$(docker ps -q --filter "label=com.docker.compose.project=${project_name}")
		xargs docker stop <<< "$project_containers"
		# Disconnect project containers and vhost-proxy from the project network and remove the network.
		# See https://github.com/docksal/service-vhost-proxy/issues/6 for more details on why this is necessary.
		local network="${project_name}_default"
		# '-I {}' and '{}' can be used to position the argument passed by xargs.
		xargs -I {} docker network disconnect -f "$network" {} 1>/dev/null <<< "$(docker ps -aq --no-trunc -f "network=${network}")"
		docker network rm "$network"
	done <<< "$running_projects"
}

# (Re)connect proxy to project networks.
# Useful when proxy has been just re-provisioned and should be re-connected to existing project networks.
networks ()
{
	# Filter: primary containers with a defined virtual host
	project_names=$(docker ps \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host" \
		--format '{{.Label "com.docker.compose.project"}}')

	while read project_name; do
		local network="${project_name}_default"
		# Making sure the network exists
		docker network create "$network" >/dev/null 2>&1
		# Reconnect vhost-proxy to the project network (in case vhost-proxy has been recently reset)
		docker network connect "$network" docksal-vhost-proxy >/dev/null 2>&1
		if [[ $? == 0 ]]; then
			log "Connected proxy to network: ${network}."
		fi
	done <<< "$project_names"
}

cron ()
{
	# Set logging prefix for the function and trigger a log entry
	export LOG_PREFIX='[cron]' && log

	stop
	stats
}

# Removed projects (containers and sources) after a timeout set via PROJECT_DANGLING_TIMEOUT.
# Projects with the label "io.docksal.permanent=true" are considered permanent and skipped.
cleanup ()
{
	# Set logging prefix for the function and trigger a log entry
	export LOG_PREFIX='[cleanup]' && log

	# Allow disabling PROJECT_DANGLING_TIMEOUT (0 = disabled)
	[[ "$PROJECT_DANGLING_TIMEOUT" == 0 ]] && exit

	# Filter: primary containers with a defined virtual host
	projects=$(docker ps -a \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host" \
		--format '{{ .ID }}:{{ .Label "com.docker.compose.project" }}:{{ .Label "io.docksal.project-root" }}:{{ .Label "io.docksal.permanent" }}')

	while read project; do
		IFS=':' read container_id project_name project_root permanent <<< "$project"

		# Skip projects for which project_root is outside of the /projects mount
		# This assumes all projects are kept in the same directory, which is mounted at /projects
		local mounted_project_root="/projects/$(basename ${project_root})"
		[[ ! -d "$mounted_project_root" ]] && continue

		# Skip permenent projects
		[[ "$permanent" == "true" ]] && continue

		# Skip active/not dangling projects
		! is_container_dangling "$container_id" && continue

		# Remove dangling project containers
		log "Removing dangling project: ${project_name}..."
		docker ps -qa --filter "label=com.docker.compose.project=${project_name}" | xargs docker rm -f
		# Remove project volumes. "docker volume prune" (used below) does not remove the project_root volume.
		# See https://github.com/moby/moby/issues/40152
		docker volume ls -q --filter "label=com.docker.compose.project=${project_name}" | xargs docker volume rm -f
		# Disconnect vhost-proxy from the project network and remove the network.
		# See https://github.com/docksal/service-vhost-proxy/issues/6 for more details on why this is necessary.
		local network="${project_name}_default"
		docker network disconnect "$network" docksal-vhost-proxy
		docker network rm "$network"
		# Remove project directory
		log "Removing directory: $mounted_project_root..."
		rm -rf "$mounted_project_root"
	done <<< "$projects"

	log "Removing dangling images..."
	docker image prune -f
	log "Removing dangling volumes..."
	docker volume prune -f
	log "Removing dangling networks..."
	docker network prune -f
}

# Trigger nginx config reload
notify ()
{
	# Dump vhosts config into logs in debug mode
	if [[ "$DEBUG_LOG" != 0 ]]; then
		echo "DEBUG: /etc/nginx/conf.d/vhosts.conf"
		echo "--------------------------------------------------"
		cat /etc/nginx/conf.d/vhosts.conf
		echo "--------------------------------------------------"
	fi

	nginx -t && nginx -s reload
}

# Helper for writing log messages
# @param $@ Log message
log ()
{
	# Writing log messages to stderr (>&2) to be able to return text values in functions on stdout (e.g. "lookup")
	echo "$(date +"%F %H:%M:%S") [proxyctl] ${LOG_PREFIX} $@" >&2
}

# Print stats for projects
stats ()
{
	# Return if stats logging is disabled
	[[ "$STATS_LOG" == 0 ]] && return

	# Set logging prefix for the function and trigger a log entry
	export LOG_PREFIX='[stats]' && log
	
	# Filter: primary containers with a defined virtual host
	projects=$(docker ps -a \
		--filter "label=io.docksal.project-root" \
		--filter "label=io.docksal.virtual-host" \
		--format '{{ .ID }}:{{ .Label "com.docker.compose.project" }}:{{ .RunningFor }}:{{ .Status }}:{{ .Label "io.docksal.permanent" }}')

	# Stats
	local runing
	local active
	local permanent
	local dangling
	# Aggregated stats
	local sum_total=0
	local sum_running=0
	local sum_permanent=0
	local sum_active=0
	local sum_dangling=0

	while read project; do
		IFS=':' read container_id project_name created status permanent <<< "$project"
		
		let "sum_total += 1"
		
		if [[ "$status" =~ "Up" ]]; then
			let "sum_running += 1"
			running=1
		else
			running=0
		fi
		
		if is_container_active "$container_id"; then
			let "sum_active += 1"
			active=1
		else
			active=0
		fi

		if [[ "$permanent" != "true" ]]; then
			permanent=0
		else
			let "sum_permanent += 1"
			permanent=1
		fi
		
		if is_container_dangling "$container_id"; then
			let "sum_dangling += 1"
			dangling=1
		else
			dangling=0
		fi
		
		log "Project: ${project_name} | Created: ${created} | Status: ${status} | Running: ${running} | Active: ${active} | Permanent: ${permanent} | Dangling: ${dangling}"
	done <<< "$projects"

	# Aggregated stats
	log "[summary] Total: ${sum_total} | Running: ${sum_running} | Active: ${sum_active} | Permanent: ${sum_permanent} | Dangling: ${sum_dangling}"
}

#-------------------------- RUNTIME STARTS HERE ----------------------------

# Parse other parameters
case "$1" in
	lookup)
		shift
		lookup "$@"
		;;
	start)
		shift
		start "$@"
		;;
	stop)
		stop
		;;
	cron)
		cron
		;;
	notify)
		notify
		;;
	networks)
		networks
		;;
	cleanup)
		cleanup
		;;
	stats)
		stats
		;;
	*)
		echo "Usage: $0 lookup <vhost>|start|stop|cron|notify|networks|cleanup|stats"
esac
